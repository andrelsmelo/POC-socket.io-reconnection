{"version":3,"sources":["components/PlayerList.js","components/Chat.js","contexts/GameContext.js","components/Login.js","components/Pong.js","App.js","serviceWorker.js","index.js"],"names":["PlayerList","props","className","Object","keys","players","map","key","name","Chat","useState","messageToSend","setMessageToSend","useEffect","elem","document","getElementById","scrollTop","scrollHeight","messages","id","join","type","value","onChange","e","target","disabled","trim","onClick","sendMessage","socket","socketClient","process","REACT_APP_SOCKET_ADDRESS","autoConnect","GameContext","React","createContext","reducer","state","action","isConnected","payload","initialState","player","GameProvider","useReducer","dispatch","on","localStorage","getItem","emit","JSON","parse","setItem","stringify","receivedMessage","open","Provider","children","message","Login","setName","onSubmit","preventDefault","login","placeholder","required","Pong","useContext","length","style","display","flexDirection","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c698d645.chunk.js","sourcesContent":["import React from 'react';\n\nconst PlayerList = (props) => {\n \n    return (\n        <div className='list-group'>\n            <span className='list-title'>Jogadores</span>\n            {Object.keys(props.players)\n                .map((key) => (\n                    <div key={key} className='list-item'>{props.players[key].name}</div>\n                ))\n            }\n        </div>\n    );\n};\n\nexport default PlayerList;\n","import React, { useState, useEffect } from 'react';\n\nconst Chat = (props) => {\n    const [messageToSend, setMessageToSend] = useState('');\n\n    const sendMessage = () => {\n        props.sendMessage(messageToSend);\n        setMessageToSend('');\n    };\n\n    useEffect(() => {\n        const elem = document.getElementById('chat-content');\n        elem.scrollTop = elem.scrollHeight;\n    }, [props.messages]);\n\n    return (\n        <div className='chat-container'>\n            <div id='chat-content' className='chat-content'>{props.messages.join('\\n\\n')}</div>\n\n            <div className='chat-form'>\n                <input\n                    type='text'\n                    value={messageToSend}\n                    onChange={(e) => setMessageToSend(e.target.value)}\n                />\n                <button\n                    disabled={!messageToSend.trim()}\n                    className={!messageToSend.trim() ? 'disabled' : ''}\n                    onClick={sendMessage}\n                >Enviar</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React, { useReducer, useEffect } from 'react';\nimport socketClient from 'socket.io-client';\n\nconst socket = socketClient(process.env.REACT_APP_SOCKET_ADDRESS, {\n  autoConnect: false,\n});\n\nconst GameContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECTED':\n      return {\n        ...state,\n        isConnected: action.payload,\n      };\n    case 'RESET_STATE':\n      return { ...initialState, isConnected: state.isConnected };\n    case 'PLAYER':\n      return {\n        ...state,\n        player: action.payload,\n      };\n    case 'PLAYERS':\n      return {\n        ...state,\n        players: action.payload,\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  isConnected: false,\n  player: {},\n  players: {},\n  messages: [],\n};\n\nconst GameProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      if (localStorage.getItem('player')) {\n        socket.emit('Reconnect', JSON.parse(localStorage.getItem('player')));\n      }\n\n      dispatch({ type: 'CONNECTED', payload: true });\n    });\n    socket.on('disconnect', () => {\n      dispatch({ type: 'CONNECTED', payload: false });\n    });\n    socket.on('PlayersRefresh', (players) => {\n      const player = players[socket.id];\n      if (player) {\n        localStorage.setItem('player', JSON.stringify(player));\n        dispatch({ type: 'PLAYER', payload: players[socket.id] });\n      } else {\n        dispatch({ type: 'RESET_STATE' });\n      }\n\n      dispatch({ type: 'PLAYERS', payload: players });\n    });\n    socket.on('ReceiveMessage', (receivedMessage) => {\n      dispatch({ type: 'ADD_MESSAGE', payload: receivedMessage });\n    });\n    socket.open();\n  }, []);\n\n  return (\n    <GameContext.Provider value={state}>{props.children}</GameContext.Provider>\n  );\n};\n\nconst sendMessage = (message) => {\n  socket.emit('SendMessage', message);\n};\n\nconst login = (name) => {\n  socket.emit('Login', name);\n};\n\nexport {\n  GameContext,\n  GameProvider,\n  sendMessage,\n  login,\n};\n","import React from 'react';\nimport { login } from '../contexts/GameContext';\nimport { useState } from 'react';\n\nexport const Login = () => {\n  const [name, setName] = useState('');\n\n  const onLogin = (e) => {\n    e.preventDefault();\n    login(name);\n  };\n\n  return (\n    <main>\n      <section>\n        <form onSubmit={onLogin}>\n          <div className='input-group'>\n            <label>Nome:</label>\n            <input\n              placeholder='Informe o nome para entrar no jogo'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </div>\n          <button>Entrar</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n","import React, { useContext } from 'react';\nimport PlayerList from './PlayerList';\nimport Chat from './Chat';\nimport { GameContext, sendMessage } from '../contexts/GameContext';\nimport { Login } from './Login';\n\nconst Pong = () => {\n  const { isConnected, player, players, messages } = useContext(\n    GameContext\n  );\n\n  if (!isConnected) {\n    return <div>Desconectado, conectando...</div>;\n  }\n\n  if (Object.keys(player).length === 0) {\n    return <Login />;\n  }\n\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row' }}>\n      <div className='list-container'>\n        <PlayerList players={players} />\n      </div>\n      <Chat sendMessage={sendMessage} messages={messages} />\n    </div>\n  );\n};\n\nexport default Pong;\n","import React from 'react';\nimport './App.css';\nimport Pong from './components/Pong';\nimport { GameProvider } from './contexts/GameContext';\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <GameProvider>\n        <Pong />\n      </GameProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}